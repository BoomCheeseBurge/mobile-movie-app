
Created an AppWrite account using GitHub account.

Created a new project within appwrite called "React_Native_Movie_App" with a fixed region of "Germany" for free tier users.

__________

Created a new React Native project with Expo framework using the following command:

npx create-expo-app@latest ./

The './' is there to install the project in the current directory.

If there is a step asking to install a package with the same name as the command, just proceed.

__________

Go to the Expo documentation from the React Native documentation where it (probably) says 'Continue with Expo'.

For the environment, the device will be 'Android' and using built-in modules with 'Expo Go'.

Install the 'Expo Go' app from the Play Store.

Created an Expo Go account.

__________

Start the development server using the following command:

`npx expo start`

After running that command, there will be a barcode shown in the console output.

Scan it using the Expo Go app on your phone.

Afterwards, there will be bundling progress percentage shown on the mobile app and bundling progress on the IDE editor.

When that is done, the view on the mobile app will be the default RN mobile app welcoming view.

__________

Go to this directory path "app/(tabs)/index.tsx" and open up the file.

Try changing the title and see the hot reloading feature in action.

__________

-------------------------
Project Folder Structure
-------------------------

- tsconfig.json

Contains rules that TypeScript will use to enforce type safety throughout the project.

------

- package.json

Contains the project's scripts, dependencies, and metadata.

------

- app.json

Contains the configuration options for the project and is often called the app config.

The slug value contains a unique identifiable value used by Expo when defining the URL (if the project is to be shown in the web).

The orientation value indicates whether the app should initially open in portrait, or landscape, or default screen orientation mode.

The icon is the full path to the app image to be displayed.

The scheme contains a custom URL to enable deep linking.
It is set to the value "movies" so that later on this can be done "movies://path/".

The userInterfaceStyle determines the dark or light mode.

The newArchEnabled was previously discussed as being the new architecture introduced in React Native.

The android object contains specific features that can be extended specifically on Android devices.

------

- scripts folder

Currently contains only a single file to reset the project to the bare minimum code.

------

- hooks, constants, components, assets folder

Contains boilerplate code of custom hooks, constants, components, and assets.

------

- app folder

Allows to route to different screens or views simialrly to NextJS.

    o (tabs) folder

    Manage the layouts for different pages.

__________

Press 'Ctrl + C' to stop the development server.

To strip the project to its bare minimum code, run the following command:

`npm run reset-project`

When asked this question, just say no:

'Do you want to move existing files to /app-example instead of deleting them? (Y/n):'

Afterwards, run the development server again and press R on the keyboard.

======================================================

Install Nativewind by running the following command:

```npx expo install nativewind react-native-reanimated@~3.17.4 react-native-safe-area-context@5.4.0
npx expo install tailwindcss@^3.4.17 prettier-plugin-tailwindcss@^0.5.11 -- -D```

Then run the following command to initialize the Tailwind config file in the project:

`npx tailwindcss init`

Created a new file within the app folder called 'globals.css'.

Created a new file in the root folder called 'babel.config.js'.

For modifying the metro config file, run the following command to import the file to the project:

`npx expo customize metro.config.js`

Next, go to the '_layout.tsx' file and import the 'globals.css' file.

Created a new file in the root folder called 'nativewind-env.d.ts'.
The code inside that file will enable TypeScript to recognize TailwindCSS classes, preventing constant error messages.

--------

Note: If something is not working or changes are not reflected in the mobile app, first try to reset the dev server.

The following command ensures that changes made to the codebase is taken into account:

`npx expo start --clear`

Then, go to the dev server running terminal and press 'R' to reload the mobile app.

__________

Define global styling for TailwindCSS.

Open the 'tailwind.config.js' file and extend the theme property.

======================================================

The app folder represents the route.

The file names within that folder represents a URL pointing to that route.

For example, the 'index.tsx' file represents the home route or starting of the mobile app.

-----

Created the 'onboarding.tsx' file in the app folder for a new route.

|

import React from 'react'
import { StyleSheet, Text, View } from 'react-native'

const onboarding = () => {
  return (
    <View>
      <Text>onboarding</Text>
    </View>
  )
}

export default onboarding

const styles = StyleSheet.create({})

|

__________

Created a new folder called 'movie' within the 'app' folder.

Created a dynamic route, '[id].tsx' within that newly created folder.

|

import { useLocalSearchParams } from 'expo-router';
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';

const Details = () => {

    const { id } = useLocalSearchParams();

  return (
    <View>
      <Text>Movie details: {id}</Text>
    </View>
  )
}

export default Details;

const styles = StyleSheet.create({})

|

Notice that the route within the movie folder is wrapped around square brackets which denotes a dynamic route.

__________

With that introduction, delete the onboarding tsx file and the movie folder.

__________

Open and view the Figma design for this course.

The design for this mobile app will be based on that.

__________

Route grouping is a neat way of organizing sections of the mobile app.

------

Created a route group called 'tabs'.

------

There is the code snippet, rnfes or rnfe, to create boilerplate for a new functional component.

------

A layout is created in that tabs route group to ensure that the navigation bar only shows up for that screen layout.

Moved the 'index.tsx' file to the route group folder.

-------

Created profile, saved, and search components.

Created a folder called movie with a dynamic route as performed previously.

-------

In the layout component within the app folder, modifications are made to change the appearance of the header in the mobile app.

Go over to the layout file for the tab route group and return a tab component there.

Link: https://docs.expo.dev/router/advanced/tabs/

This tabs component enables to modify how the bottom navigation looks.

The word modify is mentioned here instead of create because even though only the home route had been declared, three other routes are declared as well.

Out-of-the-box, React Native notices that there are other routes within the tabs route group.

-------

The order of the tabs screen components in the tabs' layout reflects the order of the tab navigation shown in the mobile app.

__________

Download the asset folder pre-made for this project here:

https://github.com/adrianhajdin/react-native-movie-app/blob/main/README.md#links

Delete the 'assets' folder.

Move the folders within that downloaded zip file into this root project folder.

--------

Add the tab bar icon for each tab in the tab layout.

__________

As with how React development goes, repetitive things are meant to be placed into its own separate component for reusability.

Create an inline component within the tabs layout component for the image background.

======================================================

Since the default asset folder was deleted and replaced with a new one, the set image path in the 'app.json' file is no longer valid.

Replace the image path the appropriate one.

After that, reload the mobile app.

__________

Replacing the app name requires a restart of the mobile app in Expo Go.

======================================================

Created a new folder for components.

Create a new functional component called 'SearchBar'.

Imported and used that newly created component in the homepage.

----

Used the router package from expo to direct the user to another route when clicking on the search field in the homepage.

======================================================

TDMB doc can be accessed here: https://developer.themoviedb.org/docs/getting-started

Created a TMDB account.

Go to settings > API > generate API token > fill in the form with necessary information.

Afterwards, an API for read access will be shown for use.

Go to the 'API Reference' section or page.

Follow through the 'Getting Started' section.

- Pick 'Node' for language.

- The rest will be automatically filled in.

- Click 'Try it' to see that it is working.

Afterwards, type in 'discover movie' in the search bar. This is the direct link: https://developer.themoviedb.org/reference/discover-movie

The code of the fetch request from this page is copied.

-------

Created a new folder called 'services'.

Created a new file within that folder called 'api.ts'.

-------

Created a .env file to store the API credentials.

Any env variables that will be used on the front-end side must be prepended by 'EXPO_PUBLIC'.

======================================================

Created a new file called 'useFetch.ts' for a custom hook.

======================================================

Modified the 'index.tsx' file to display movies in a neat way with cards.

Created a component called 'MovieCard.tsx'.

======================================================

Finished movie search by using the search query to search for movies.

Use the useEffect hook to trigger fetching another set of movies when the search term changes after a certain interval.

Take advantage of the Flatlist props to determine what to show in different states of the screen (results found or empty or error).

======================================================

AppWrite is an easy Backend-as-a-Service (BaaS) platform to avoid having to do the nitty gritty work of having to build a separate app for tracking search movies pattern by a user.

AppWrite is simple and open-source.

Copy the ID of the created project from the AppWrite console and paste it into the .env file.

------

Next, setup a platform for the project, so go back to the project in AppWrite.

1. Within the project, click on "+ Add platform" button and choose "React Native"
2. Make sure the radio button is set to whatever OS you are using.
3. Give the name (e.g., Mobile-Movie-App) and package name (e.g., com.momovie.app)
4. Follow the instructions in the next step

---

Create a database from AppWrite and name it 'movies'.

Copy the database ID and paste it into the .env file.

---

Create a database from AppWrite and name it 'movies'.

Copy the database ID and paste it into the .env file.

Click on the "+ Create collection" and name it 'metrics'.

Copy the collection ID and paste it into the .env file.

---

Create the necessary attributes for the collection by switching over to the 'collection' tab.

1. Create a string type attribute with the following config:

[ Attribute key ]

searchTerm

[ Size ]

1000

[ Required ]

✓

2. Create a integer type attribute with the following config:

[ Attribute key ]

count

[ Default value ]

0

(Keep track of how many a user has searched for each specific movie or a search term)

3. Create a URL type attribute with the following config:

[ Attribute key ]

poster_url

[ Required ]

✓

(Store the poster image of the movie being searched)

4. Create a integer type attribute with the following config:

[ Attribute key ]

movie_id

[ Required ]

✓

5. Create a string type attribute with the following config:

[ Attribute key ]

title

[ Size ]

1000

[ Required ]

✓

----

Afterwards, set the necessary permissions.

1. Head over to the 'settings' tab in the current collection

2. Scroll down to the 'Permissions' section.

3. Add a new role of 'any'

4. Tick every checkboxes there

5. Click on 'update'

-----

Created a new TS file called 'appwrite.ts' in the 'services' folder.

Updated the useEffect hook in 'search.tsx' to call the update search count.
